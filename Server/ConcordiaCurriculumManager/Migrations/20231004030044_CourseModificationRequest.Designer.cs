// <auto-generated />
using System;
using ConcordiaCurriculumManager.Models.Users;
using ConcordiaCurriculumManager.Repositories.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConcordiaCurriculumManager.Migrations
{
    [DbContext(typeof(CCMDbContext))]
    [Migration("20231004030044_CourseModificationRequest")]
    partial class CourseModificationRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_enum", new[] { "Initiator", "Admin", "FacultyMember" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Career")
                        .HasColumnType("integer");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("CourseState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreditValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquivalentCourses")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreReqs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentCode")
                        .HasColumnType("integer");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CourseComponents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41a56649-2a8c-41f4-b514-612a673aaf36"),
                            ComponentCode = 0,
                            ComponentName = "Conference",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9790),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9790)
                        },
                        new
                        {
                            Id = new Guid("72603e20-0cc8-423b-a734-d89b506eb800"),
                            ComponentCode = 1,
                            ComponentName = "Field Studies",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9810),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9810)
                        },
                        new
                        {
                            Id = new Guid("833447bd-a76a-44fa-a7fc-e1be469aedc6"),
                            ComponentCode = 2,
                            ComponentName = "Fieldwork",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9820),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9820)
                        },
                        new
                        {
                            Id = new Guid("1e3e6d8b-a5ec-4c8c-bc68-ba22de17a264"),
                            ComponentCode = 3,
                            ComponentName = "Independent Study",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9830),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9830)
                        },
                        new
                        {
                            Id = new Guid("026cb6f1-519b-4c79-8bbd-e5d65c689138"),
                            ComponentCode = 4,
                            ComponentName = "Laboratory",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9850),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9850)
                        },
                        new
                        {
                            Id = new Guid("46ce75e7-28fd-4ee8-a29e-99c36853a42f"),
                            ComponentCode = 5,
                            ComponentName = "Lecture",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9860),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9860)
                        },
                        new
                        {
                            Id = new Guid("5ed5ab3a-4ab7-4ee9-bad0-85fa6f810e68"),
                            ComponentCode = 6,
                            ComponentName = "Modular",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9870),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9870)
                        },
                        new
                        {
                            Id = new Guid("84b8726f-1117-41b7-b706-d962eb952382"),
                            ComponentCode = 7,
                            ComponentName = "Online",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9880),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9880)
                        },
                        new
                        {
                            Id = new Guid("a9d28400-ae2e-4e08-8d80-9bb5e7b0cde6"),
                            ComponentCode = 8,
                            ComponentName = "Practicum/Internship/Work-Term",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9890),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9890)
                        },
                        new
                        {
                            Id = new Guid("0c27f379-e9a5-4def-8760-801903df90e8"),
                            ComponentCode = 9,
                            ComponentName = "Private Studies",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9910),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9910)
                        },
                        new
                        {
                            Id = new Guid("5e046a4b-1946-4ad9-9531-89780a1ae0ea"),
                            ComponentCode = 10,
                            ComponentName = "Reading",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9920),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9920)
                        },
                        new
                        {
                            Id = new Guid("5e0c5821-9adc-4b0d-b017-abfe99bd05bf"),
                            ComponentCode = 11,
                            ComponentName = "Regular",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9930),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9930)
                        },
                        new
                        {
                            Id = new Guid("31bd8982-23a6-4bd2-b01c-3c7afcb2246a"),
                            ComponentCode = 12,
                            ComponentName = "Research",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9940),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9940)
                        },
                        new
                        {
                            Id = new Guid("004878a5-af45-4d22-85d6-bfa33f2ced21"),
                            ComponentCode = 13,
                            ComponentName = "Seminar",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9950),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9950)
                        },
                        new
                        {
                            Id = new Guid("d113746c-808c-4814-ae0f-1dc59f55c87a"),
                            ComponentCode = 14,
                            ComponentName = "Studio",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9970),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9970)
                        },
                        new
                        {
                            Id = new Guid("c15ee139-e696-4933-9c7f-ace8b85da525"),
                            ComponentCode = 15,
                            ComponentName = "Thesis Research",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9980),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9980)
                        },
                        new
                        {
                            Id = new Guid("c87de41e-82f5-4f16-8741-9ba4d8540df1"),
                            ComponentCode = 16,
                            ComponentName = "Tutorial",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9990),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9990)
                        },
                        new
                        {
                            Id = new Guid("7e3786d7-6a87-4a1b-b758-a14691c6f1b5"),
                            ComponentCode = 17,
                            ComponentName = "Tutorial/Lab",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 345, DateTimeKind.Utc).AddTicks(10),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 345, DateTimeKind.Utc).AddTicks(10)
                        },
                        new
                        {
                            Id = new Guid("92724877-5614-41a1-a614-de24d621b040"),
                            ComponentCode = 18,
                            ComponentName = "Workshop",
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 345, DateTimeKind.Utc).AddTicks(20),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 345, DateTimeKind.Utc).AddTicks(20)
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseReferencedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseReferencingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseReferencedId");

                    b.HasIndex("CourseReferencingId");

                    b.ToTable("CourseReferences");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DossierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NewCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("NewCourseId")
                        .IsUnique();

                    b.ToTable("CourseCreationRequests");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseModificationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DossierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("DossierId");

                    b.ToTable("CourseModificationRequests");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<RoleEnum>("UserRole")
                        .HasColumnType("role_enum");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4b87914-32a6-478a-b1b3-61f78e6a6707"),
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9230),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9230),
                            UserRole = RoleEnum.Initiator
                        },
                        new
                        {
                            Id = new Guid("513b0d86-86b4-4808-99f0-3f97a77b65f3"),
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9250),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9250),
                            UserRole = RoleEnum.Admin
                        },
                        new
                        {
                            Id = new Guid("9db8ca41-2846-4d72-bde4-96d9302cfb4f"),
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9260),
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9260),
                            UserRole = RoleEnum.FacultyMember
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37581d9d-713f-475c-9668-23971b0e64d0"),
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9400),
                            Email = "admin@ccm.ca",
                            FirstName = "Super",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9400),
                            Password = "9767718E8A58C097D48ED8986E632368F71F71740C6DCE113AE75ED90176DA49:FE06FEFB87C75014327930CFB3373565"
                        },
                        new
                        {
                            Id = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a"),
                            CreatedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9420),
                            Email = "joe.user@ccm.ca",
                            FirstName = "Joe",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 4, 3, 0, 44, 344, DateTimeKind.Utc).AddTicks(9420),
                            Password = "DAFBF72A150765D4DDDB5089E2D8516F5C68A00DD77930F2F4C013CB89DB8E77:B497E6DD99B7DD2ED2632F5A136A8788"
                        });
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.Property<Guid>("CourseComponentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseComponentsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CourseCourseComponent");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("513b0d86-86b4-4808-99f0-3f97a77b65f3"),
                            UsersId = new Guid("37581d9d-713f-475c-9668-23971b0e64d0")
                        },
                        new
                        {
                            RolesId = new Guid("d4b87914-32a6-478a-b1b3-61f78e6a6707"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        },
                        new
                        {
                            RolesId = new Guid("9db8ca41-2846-4d72-bde4-96d9302cfb4f"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "CourseReferenced")
                        .WithMany("CourseReferenced")
                        .HasForeignKey("CourseReferencedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "CourseReferencing")
                        .WithMany("CourseReferencing")
                        .HasForeignKey("CourseReferencingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReferenced");

                    b.Navigation("CourseReferencing");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", "Dossier")
                        .WithMany("CourseCreationRequests")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "NewCourse")
                        .WithOne("CourseCreationRequest")
                        .HasForeignKey("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", "NewCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dossier");

                    b.Navigation("NewCourse");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseModificationRequest", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "Course")
                        .WithOne("CourseModificationRequest")
                        .HasForeignKey("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseModificationRequest", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", "Dossier")
                        .WithMany("CourseModificationRequests")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Dossier");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("Dossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", null)
                        .WithMany()
                        .HasForeignKey("CourseComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Navigation("CourseCreationRequest");

                    b.Navigation("CourseModificationRequest");

                    b.Navigation("CourseReferenced");

                    b.Navigation("CourseReferencing");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Navigation("CourseCreationRequests");

                    b.Navigation("CourseModificationRequests");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
