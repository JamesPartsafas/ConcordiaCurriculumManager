// <auto-generated />
using System;
using ConcordiaCurriculumManager.Models.Users;
using ConcordiaCurriculumManager.Repositories.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConcordiaCurriculumManager.Migrations
{
    [DbContext(typeof(CCMDbContext))]
    [Migration("20230930204618_DossierCreation")]
    partial class DossierCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_enum", new[] { "Initiator", "Admin", "FacultyMember" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Career")
                        .HasColumnType("integer");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("CourseState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreditValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquivalentCourses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreReqs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentCode")
                        .HasColumnType("integer");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CourseComponents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8711e58-600d-43eb-824c-66b846c4aaff"),
                            ComponentCode = 0,
                            ComponentName = "Conference",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7180),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7180)
                        },
                        new
                        {
                            Id = new Guid("6cb4f25f-22ac-491a-9d60-491711043097"),
                            ComponentCode = 1,
                            ComponentName = "Field Studies",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7190),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7190)
                        },
                        new
                        {
                            Id = new Guid("9c714af3-b538-4ab5-a33f-a25f81e5023a"),
                            ComponentCode = 2,
                            ComponentName = "Fieldwork",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7190),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7190)
                        },
                        new
                        {
                            Id = new Guid("ab732879-0326-457a-a9f3-36b129243c0f"),
                            ComponentCode = 3,
                            ComponentName = "Independent Study",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7200),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7200)
                        },
                        new
                        {
                            Id = new Guid("2feb923c-cf64-4065-b6bd-95ec55754042"),
                            ComponentCode = 4,
                            ComponentName = "Laboratory",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7210),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7210)
                        },
                        new
                        {
                            Id = new Guid("93bc8f88-cd46-4902-a6fc-b03eff9588dc"),
                            ComponentCode = 5,
                            ComponentName = "Lecture",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7220),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7220)
                        },
                        new
                        {
                            Id = new Guid("a6c0aa59-2898-40e7-af5e-a5d3495e3958"),
                            ComponentCode = 6,
                            ComponentName = "Modular",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7220),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7220)
                        },
                        new
                        {
                            Id = new Guid("18cb9287-708f-4e97-bbf7-e575e9bc1c69"),
                            ComponentCode = 7,
                            ComponentName = "Online",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7230),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7230)
                        },
                        new
                        {
                            Id = new Guid("5515576d-562a-401e-b163-7df95bb261c3"),
                            ComponentCode = 8,
                            ComponentName = "Practicum/Internship/Work-Term",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7240),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7240)
                        },
                        new
                        {
                            Id = new Guid("a0573ccc-3e62-4ef4-9c68-5fa05da58d95"),
                            ComponentCode = 9,
                            ComponentName = "Private Studies",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7250),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7250)
                        },
                        new
                        {
                            Id = new Guid("a2518737-c96e-437f-936a-4ebccfecd5a7"),
                            ComponentCode = 10,
                            ComponentName = "Reading",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7250),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7250)
                        },
                        new
                        {
                            Id = new Guid("a5ff0e55-3d0a-4485-8ad6-ef69fbbd9bd6"),
                            ComponentCode = 11,
                            ComponentName = "Regular",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7260),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7260)
                        },
                        new
                        {
                            Id = new Guid("c3481245-3c4a-4007-9f0a-f32623113c7c"),
                            ComponentCode = 12,
                            ComponentName = "Research",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7270),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7270)
                        },
                        new
                        {
                            Id = new Guid("15a22992-5346-4afb-a4d9-9dbc381169d5"),
                            ComponentCode = 13,
                            ComponentName = "Seminar",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7280),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7280)
                        },
                        new
                        {
                            Id = new Guid("8bba87b6-2e85-4023-a4f4-7dd4aae77c1c"),
                            ComponentCode = 14,
                            ComponentName = "Studio",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7280),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7280)
                        },
                        new
                        {
                            Id = new Guid("7303d94e-9100-4f23-a9ef-0c4d7bc8edde"),
                            ComponentCode = 15,
                            ComponentName = "Thesis Research",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7290),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7290)
                        },
                        new
                        {
                            Id = new Guid("e4aa5e30-c717-4ffa-98a7-2967cd089aa1"),
                            ComponentCode = 16,
                            ComponentName = "Tutorial",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7300),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7300)
                        },
                        new
                        {
                            Id = new Guid("938ce338-31c1-4a29-ad71-46a9aed3fc34"),
                            ComponentCode = 17,
                            ComponentName = "Tutorial/Lab",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7310),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7310)
                        },
                        new
                        {
                            Id = new Guid("ed384c50-8591-40e3-a3b2-ac9d283d0c44"),
                            ComponentCode = 18,
                            ComponentName = "Workshop",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7310),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(7310)
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseID"));

                    b.Property<Guid>("CourseReferencingId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseID");

                    b.HasIndex("CourseReferencingId");

                    b.ToTable("CourseReferences");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NewCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("NewCourseId")
                        .IsUnique();

                    b.ToTable("CourseCreationDossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<RoleEnum>("UserRole")
                        .HasColumnType("role_enum");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c7f7238-82fe-47cf-9a79-a8de164ae2d1"),
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(6830),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(6830),
                            UserRole = RoleEnum.Initiator
                        },
                        new
                        {
                            Id = new Guid("3dd23161-b555-4e7e-b3fe-940df30a6540"),
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(6840),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(6840),
                            UserRole = RoleEnum.Admin
                        },
                        new
                        {
                            Id = new Guid("3dec37e6-b32e-433f-b3db-d1ba12f1bad3"),
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(6850),
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(6850),
                            UserRole = RoleEnum.FacultyMember
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37581d9d-713f-475c-9668-23971b0e64d0"),
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(6920),
                            Email = "admin@ccm.ca",
                            FirstName = "Super",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(6920),
                            Password = "9767718E8A58C097D48ED8986E632368F71F71740C6DCE113AE75ED90176DA49:FE06FEFB87C75014327930CFB3373565"
                        },
                        new
                        {
                            Id = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a"),
                            CreatedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(6940),
                            Email = "joe.user@ccm.ca",
                            FirstName = "Joe",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 9, 30, 20, 46, 18, 65, DateTimeKind.Utc).AddTicks(6940),
                            Password = "DAFBF72A150765D4DDDB5089E2D8516F5C68A00DD77930F2F4C013CB89DB8E77:B497E6DD99B7DD2ED2632F5A136A8788"
                        });
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.Property<Guid>("CourseComponentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseComponentsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CourseCourseComponent");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("3dd23161-b555-4e7e-b3fe-940df30a6540"),
                            UsersId = new Guid("37581d9d-713f-475c-9668-23971b0e64d0")
                        },
                        new
                        {
                            RolesId = new Guid("9c7f7238-82fe-47cf-9a79-a8de164ae2d1"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        },
                        new
                        {
                            RolesId = new Guid("3dec37e6-b32e-433f-b3db-d1ba12f1bad3"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", "CourseReference")
                        .WithMany("CourseReferenced")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReference");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "CourseReferencing")
                        .WithMany()
                        .HasForeignKey("CourseReferencingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReferencing");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("CourseCreationDossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "NewCourse")
                        .WithOne("CourseCreationDossier")
                        .HasForeignKey("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", "NewCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");

                    b.Navigation("NewCourse");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("Dossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", null)
                        .WithMany()
                        .HasForeignKey("CourseComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Navigation("CourseCreationDossier");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.Navigation("CourseReferenced");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Navigation("CourseCreationDossiers");

                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
