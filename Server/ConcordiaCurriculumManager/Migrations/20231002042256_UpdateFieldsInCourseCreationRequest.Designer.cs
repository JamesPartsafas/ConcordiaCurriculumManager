// <auto-generated />
using System;
using ConcordiaCurriculumManager.Models.Users;
using ConcordiaCurriculumManager.Repositories.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConcordiaCurriculumManager.Migrations
{
    [DbContext(typeof(CCMDbContext))]
    [Migration("20231002042256_UpdateFieldsInCourseCreationRequest")]
    partial class UpdateFieldsInCourseCreationRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_enum", new[] { "Initiator", "Admin", "FacultyMember" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Career")
                        .HasColumnType("integer");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("CourseState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreditValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquivalentCourses")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreReqs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentCode")
                        .HasColumnType("integer");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CourseComponents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8844bbbf-a244-4add-96d4-332c6a5abfc8"),
                            ComponentCode = 0,
                            ComponentName = "Conference",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4632),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4633)
                        },
                        new
                        {
                            Id = new Guid("fe407502-68bc-4923-8e8a-9661edd95a98"),
                            ComponentCode = 1,
                            ComponentName = "Field Studies",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4639),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4639)
                        },
                        new
                        {
                            Id = new Guid("c989fbf3-39f2-4db9-8478-91f899a2f380"),
                            ComponentCode = 2,
                            ComponentName = "Fieldwork",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4642),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4642)
                        },
                        new
                        {
                            Id = new Guid("63b42a50-52f1-42dd-80c6-184b262cf894"),
                            ComponentCode = 3,
                            ComponentName = "Independent Study",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4644),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4645)
                        },
                        new
                        {
                            Id = new Guid("6f3faecb-3253-4d9e-9629-b2491182a6da"),
                            ComponentCode = 4,
                            ComponentName = "Laboratory",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4646),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4647)
                        },
                        new
                        {
                            Id = new Guid("3b4fdb95-8257-42b4-8f72-a86dd597f418"),
                            ComponentCode = 5,
                            ComponentName = "Lecture",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4650),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4650)
                        },
                        new
                        {
                            Id = new Guid("fb82c910-3047-4c71-9f89-5847816914d9"),
                            ComponentCode = 6,
                            ComponentName = "Modular",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4656),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4656)
                        },
                        new
                        {
                            Id = new Guid("9afd068c-dcf0-4137-861d-2f4e2be40937"),
                            ComponentCode = 7,
                            ComponentName = "Online",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4658),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4658)
                        },
                        new
                        {
                            Id = new Guid("9f2e530b-04e8-4fef-a2af-5838c5dbf70e"),
                            ComponentCode = 8,
                            ComponentName = "Practicum/Internship/Work-Term",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4660),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4660)
                        },
                        new
                        {
                            Id = new Guid("663f174f-48cf-4cf5-bf07-697f6b632209"),
                            ComponentCode = 9,
                            ComponentName = "Private Studies",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4663),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4663)
                        },
                        new
                        {
                            Id = new Guid("480897a2-423c-4e42-8a19-e557de1d5d73"),
                            ComponentCode = 10,
                            ComponentName = "Reading",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4665),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4665)
                        },
                        new
                        {
                            Id = new Guid("619f79c0-3920-4802-af91-f479fa058756"),
                            ComponentCode = 11,
                            ComponentName = "Regular",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4667),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4667)
                        },
                        new
                        {
                            Id = new Guid("f281afe7-bfc2-4642-b9d7-65b5f83e6b75"),
                            ComponentCode = 12,
                            ComponentName = "Research",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4669),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4670)
                        },
                        new
                        {
                            Id = new Guid("c610d3e4-402b-4e29-a25f-06dcaf468e01"),
                            ComponentCode = 13,
                            ComponentName = "Seminar",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4671),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4672)
                        },
                        new
                        {
                            Id = new Guid("a08443e9-0a71-44b3-bd70-e1e52a573a94"),
                            ComponentCode = 14,
                            ComponentName = "Studio",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4675),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4675)
                        },
                        new
                        {
                            Id = new Guid("61eb6aca-74ff-4c8f-8afe-2b940d8537f3"),
                            ComponentCode = 15,
                            ComponentName = "Thesis Research",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4677),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4677)
                        },
                        new
                        {
                            Id = new Guid("a342bd02-c9ec-43de-accf-fa36ad9762a9"),
                            ComponentCode = 16,
                            ComponentName = "Tutorial",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4679),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4679)
                        },
                        new
                        {
                            Id = new Guid("bc906976-5817-485e-9319-ff6b7f6cb07a"),
                            ComponentCode = 17,
                            ComponentName = "Tutorial/Lab",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4681),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4682)
                        },
                        new
                        {
                            Id = new Guid("d09c48d2-00f1-41aa-9236-17cb12ce3a11"),
                            ComponentCode = 18,
                            ComponentName = "Workshop",
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4683),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4684)
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseReferencedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseReferencingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseReferencedId");

                    b.HasIndex("CourseReferencingId");

                    b.ToTable("CourseReferences");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DossierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NewCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("NewCourseId")
                        .IsUnique();

                    b.ToTable("CourseCreationRequests");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<RoleEnum>("UserRole")
                        .HasColumnType("role_enum");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5249001-ed33-44be-9492-844d0361dc08"),
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4002),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4005),
                            UserRole = RoleEnum.Initiator
                        },
                        new
                        {
                            Id = new Guid("2ee354fb-fa04-4e3b-9f69-1e505b8c2c6b"),
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4020),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4020),
                            UserRole = RoleEnum.Admin
                        },
                        new
                        {
                            Id = new Guid("48887908-740b-4694-ad8f-ce42f7543665"),
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4023),
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4023),
                            UserRole = RoleEnum.FacultyMember
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37581d9d-713f-475c-9668-23971b0e64d0"),
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4104),
                            Email = "admin@ccm.ca",
                            FirstName = "Super",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4105),
                            Password = "9767718E8A58C097D48ED8986E632368F71F71740C6DCE113AE75ED90176DA49:FE06FEFB87C75014327930CFB3373565"
                        },
                        new
                        {
                            Id = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a"),
                            CreatedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4150),
                            Email = "joe.user@ccm.ca",
                            FirstName = "Joe",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 2, 4, 22, 55, 973, DateTimeKind.Utc).AddTicks(4150),
                            Password = "DAFBF72A150765D4DDDB5089E2D8516F5C68A00DD77930F2F4C013CB89DB8E77:B497E6DD99B7DD2ED2632F5A136A8788"
                        });
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.Property<Guid>("CourseComponentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseComponentsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CourseCourseComponent");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("2ee354fb-fa04-4e3b-9f69-1e505b8c2c6b"),
                            UsersId = new Guid("37581d9d-713f-475c-9668-23971b0e64d0")
                        },
                        new
                        {
                            RolesId = new Guid("c5249001-ed33-44be-9492-844d0361dc08"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        },
                        new
                        {
                            RolesId = new Guid("48887908-740b-4694-ad8f-ce42f7543665"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "CourseReferenced")
                        .WithMany("CourseReferenced")
                        .HasForeignKey("CourseReferencedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "CourseReferencing")
                        .WithMany("CourseReferencing")
                        .HasForeignKey("CourseReferencingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReferenced");

                    b.Navigation("CourseReferencing");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", "Dossier")
                        .WithMany("CourseCreationRequests")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "NewCourse")
                        .WithOne("CourseCreationRequest")
                        .HasForeignKey("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", "NewCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dossier");

                    b.Navigation("NewCourse");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("Dossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", null)
                        .WithMany()
                        .HasForeignKey("CourseComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Navigation("CourseCreationRequest");

                    b.Navigation("CourseReferenced");

                    b.Navigation("CourseReferencing");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Navigation("CourseCreationRequests");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
