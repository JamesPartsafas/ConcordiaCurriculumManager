// <auto-generated />
using System;
using ConcordiaCurriculumManager.Models.Users;
using ConcordiaCurriculumManager.Repositories.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConcordiaCurriculumManager.Migrations
{
    [DbContext(typeof(CCMDbContext))]
    [Migration("20231001013329_ChangeCourseCreationDossierToCourseCreationRequest")]
    partial class ChangeCourseCreationDossierToCourseCreationRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_enum", new[] { "Initiator", "Admin", "FacultyMember" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Career")
                        .HasColumnType("integer");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("CourseState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreditValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquivalentCourses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreReqs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentCode")
                        .HasColumnType("integer");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CourseComponents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb51146f-0f5f-4874-be77-4d6dbdc17700"),
                            ComponentCode = 0,
                            ComponentName = "Conference",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3611),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3612)
                        },
                        new
                        {
                            Id = new Guid("674708bd-54ff-4ef3-bbc9-ba4e8925ca13"),
                            ComponentCode = 1,
                            ComponentName = "Field Studies",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3619),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3619)
                        },
                        new
                        {
                            Id = new Guid("356c8039-c7c2-41cb-88fe-3d599d61c4d3"),
                            ComponentCode = 2,
                            ComponentName = "Fieldwork",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3622),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3622)
                        },
                        new
                        {
                            Id = new Guid("811316e2-b37c-41e2-acf9-ac0265c5832d"),
                            ComponentCode = 3,
                            ComponentName = "Independent Study",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3624),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3625)
                        },
                        new
                        {
                            Id = new Guid("51af3bee-a03b-4275-8fa0-0b05cbdbe583"),
                            ComponentCode = 4,
                            ComponentName = "Laboratory",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3639),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3640)
                        },
                        new
                        {
                            Id = new Guid("ebc8bd19-adab-4aa1-ab62-9b9bc32f9359"),
                            ComponentCode = 5,
                            ComponentName = "Lecture",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3643),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3644)
                        },
                        new
                        {
                            Id = new Guid("940d9e6f-8db1-43fb-9a42-7f862ac124bb"),
                            ComponentCode = 6,
                            ComponentName = "Modular",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3646),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3646)
                        },
                        new
                        {
                            Id = new Guid("5ca40d42-780c-4258-bc2d-c7e7b2daa65b"),
                            ComponentCode = 7,
                            ComponentName = "Online",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3648),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3649)
                        },
                        new
                        {
                            Id = new Guid("f08ac39f-b0e6-487a-896c-6c7fbc671fb2"),
                            ComponentCode = 8,
                            ComponentName = "Practicum/Internship/Work-Term",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3651),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3651)
                        },
                        new
                        {
                            Id = new Guid("5ae01d9c-c388-448c-b8a0-8e6c7920bcc4"),
                            ComponentCode = 9,
                            ComponentName = "Private Studies",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3654),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3654)
                        },
                        new
                        {
                            Id = new Guid("fe68260e-19eb-438d-95fa-ce8b2e7d2046"),
                            ComponentCode = 10,
                            ComponentName = "Reading",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3656),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3656)
                        },
                        new
                        {
                            Id = new Guid("a2577e32-f488-4111-af58-58751ae0baca"),
                            ComponentCode = 11,
                            ComponentName = "Regular",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3659),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3659)
                        },
                        new
                        {
                            Id = new Guid("8f6def6a-192a-4411-9aa6-88eaea8e664d"),
                            ComponentCode = 12,
                            ComponentName = "Research",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3663),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3663)
                        },
                        new
                        {
                            Id = new Guid("bdb5c77c-4abb-49d7-a4c4-4f0dfc887e71"),
                            ComponentCode = 13,
                            ComponentName = "Seminar",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3665),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3665)
                        },
                        new
                        {
                            Id = new Guid("33253aa4-68db-4542-86e7-483fe1fbffc0"),
                            ComponentCode = 14,
                            ComponentName = "Studio",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3667),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3668)
                        },
                        new
                        {
                            Id = new Guid("ef00b09c-36b3-46c3-b1bf-348c7f6e76d0"),
                            ComponentCode = 15,
                            ComponentName = "Thesis Research",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3670),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3670)
                        },
                        new
                        {
                            Id = new Guid("f1e721ad-94d7-4230-90c5-38a423ac5bfb"),
                            ComponentCode = 16,
                            ComponentName = "Tutorial",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3672),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3672)
                        },
                        new
                        {
                            Id = new Guid("b0476aff-0008-4077-a7b6-bf9a95acb0fa"),
                            ComponentCode = 17,
                            ComponentName = "Tutorial/Lab",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3675),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3675)
                        },
                        new
                        {
                            Id = new Guid("cf3964d0-a3d1-4df0-9527-7046bda7e901"),
                            ComponentCode = 18,
                            ComponentName = "Workshop",
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3677),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3677)
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseID"));

                    b.Property<Guid>("CourseReferencingId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseID");

                    b.HasIndex("CourseReferencingId");

                    b.ToTable("CourseReferences");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DossierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NewCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("NewCourseId")
                        .IsUnique();

                    b.ToTable("CourseCreationRequests");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<RoleEnum>("UserRole")
                        .HasColumnType("role_enum");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2f15b84-c948-445d-905e-5e31edede8e9"),
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(2881),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(2884),
                            UserRole = RoleEnum.Initiator
                        },
                        new
                        {
                            Id = new Guid("0fcc7db8-6901-4f3a-a96c-0e0813f49169"),
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(2894),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(2894),
                            UserRole = RoleEnum.Admin
                        },
                        new
                        {
                            Id = new Guid("57362097-1c44-4b27-9044-123274e957a4"),
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(2897),
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(2897),
                            UserRole = RoleEnum.FacultyMember
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37581d9d-713f-475c-9668-23971b0e64d0"),
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3001),
                            Email = "admin@ccm.ca",
                            FirstName = "Super",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3002),
                            Password = "9767718E8A58C097D48ED8986E632368F71F71740C6DCE113AE75ED90176DA49:FE06FEFB87C75014327930CFB3373565"
                        },
                        new
                        {
                            Id = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a"),
                            CreatedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3023),
                            Email = "joe.user@ccm.ca",
                            FirstName = "Joe",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 1, 1, 33, 29, 249, DateTimeKind.Utc).AddTicks(3024),
                            Password = "DAFBF72A150765D4DDDB5089E2D8516F5C68A00DD77930F2F4C013CB89DB8E77:B497E6DD99B7DD2ED2632F5A136A8788"
                        });
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.Property<Guid>("CourseComponentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseComponentsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CourseCourseComponent");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("0fcc7db8-6901-4f3a-a96c-0e0813f49169"),
                            UsersId = new Guid("37581d9d-713f-475c-9668-23971b0e64d0")
                        },
                        new
                        {
                            RolesId = new Guid("a2f15b84-c948-445d-905e-5e31edede8e9"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        },
                        new
                        {
                            RolesId = new Guid("57362097-1c44-4b27-9044-123274e957a4"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", "CourseReference")
                        .WithMany("CourseReferenced")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReference");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "CourseReferencing")
                        .WithMany()
                        .HasForeignKey("CourseReferencingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReferencing");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", "Dossier")
                        .WithMany()
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("CourseCreationRequests")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "NewCourse")
                        .WithOne("CourseCreationRequest")
                        .HasForeignKey("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", "NewCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dossier");

                    b.Navigation("Initiator");

                    b.Navigation("NewCourse");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("Dossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", null)
                        .WithMany()
                        .HasForeignKey("CourseComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Navigation("CourseCreationRequest");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.Navigation("CourseReferenced");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Navigation("CourseCreationRequests");

                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
