// <auto-generated />
using System;
using ConcordiaCurriculumManager.Models.Users;
using ConcordiaCurriculumManager.Repositories.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConcordiaCurriculumManager.Migrations
{
    [DbContext(typeof(CCMDbContext))]
    [Migration("20231002023728_RenameCourseCreationDossierToCourseCreationRequest")]
    partial class RenameCourseCreationDossierToCourseCreationRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_enum", new[] { "Initiator", "Admin", "FacultyMember" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Career")
                        .HasColumnType("integer");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("CourseState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreditValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquivalentCourses")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreReqs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentCode")
                        .HasColumnType("integer");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CourseComponents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47370be6-9915-4eff-8f41-6871a9dea0d6"),
                            ComponentCode = 0,
                            ComponentName = "Conference",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1273),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1274)
                        },
                        new
                        {
                            Id = new Guid("7ac45e1a-cfac-4eab-9280-5bb074df3dd0"),
                            ComponentCode = 1,
                            ComponentName = "Field Studies",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1285),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1285)
                        },
                        new
                        {
                            Id = new Guid("bf4f40f0-0de1-42a2-88d6-f68a17c867a6"),
                            ComponentCode = 2,
                            ComponentName = "Fieldwork",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1288),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1288)
                        },
                        new
                        {
                            Id = new Guid("38fd5a41-e9e4-4952-8162-f77cd4e3efa7"),
                            ComponentCode = 3,
                            ComponentName = "Independent Study",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1291),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1291)
                        },
                        new
                        {
                            Id = new Guid("af62346d-8c64-416c-84c1-97b25d2040ea"),
                            ComponentCode = 4,
                            ComponentName = "Laboratory",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1293),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1293)
                        },
                        new
                        {
                            Id = new Guid("fc70ad1e-ea15-4da0-b0e3-5ef274694489"),
                            ComponentCode = 5,
                            ComponentName = "Lecture",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1296),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1297)
                        },
                        new
                        {
                            Id = new Guid("cfe7bacc-5bf9-45cf-a65c-4ec2a2a29d98"),
                            ComponentCode = 6,
                            ComponentName = "Modular",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1298),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1299)
                        },
                        new
                        {
                            Id = new Guid("053cab82-5c6f-461e-8e21-8e587bf6d396"),
                            ComponentCode = 7,
                            ComponentName = "Online",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1300),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1301)
                        },
                        new
                        {
                            Id = new Guid("7168d061-6395-4472-a04b-0a8d3ec9fc8e"),
                            ComponentCode = 8,
                            ComponentName = "Practicum/Internship/Work-Term",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1302),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1303)
                        },
                        new
                        {
                            Id = new Guid("b5b8de1c-e54f-4ec8-a69d-12f0f48f4c39"),
                            ComponentCode = 9,
                            ComponentName = "Private Studies",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1307),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1308)
                        },
                        new
                        {
                            Id = new Guid("2731560c-8272-43f8-96d4-1720e9b3fffa"),
                            ComponentCode = 10,
                            ComponentName = "Reading",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1309),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1310)
                        },
                        new
                        {
                            Id = new Guid("557813ed-b41f-44e2-8fc8-29fad17371bb"),
                            ComponentCode = 11,
                            ComponentName = "Regular",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1311),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1312)
                        },
                        new
                        {
                            Id = new Guid("01bfe37c-fb2c-4956-b5aa-e0fb05023905"),
                            ComponentCode = 12,
                            ComponentName = "Research",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1313),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1314)
                        },
                        new
                        {
                            Id = new Guid("0764a497-e8dd-4dad-86f9-55c81793f012"),
                            ComponentCode = 13,
                            ComponentName = "Seminar",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1335),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1335)
                        },
                        new
                        {
                            Id = new Guid("fa455046-9c1b-4ca8-9957-a4452e127dfb"),
                            ComponentCode = 14,
                            ComponentName = "Studio",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1337),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1337)
                        },
                        new
                        {
                            Id = new Guid("182b57e4-9085-4e12-b73a-1792aa8da77a"),
                            ComponentCode = 15,
                            ComponentName = "Thesis Research",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1339),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1339)
                        },
                        new
                        {
                            Id = new Guid("342b75c6-dad1-40b2-87cb-61e4fceceb6d"),
                            ComponentCode = 16,
                            ComponentName = "Tutorial",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1341),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1341)
                        },
                        new
                        {
                            Id = new Guid("b7a84f21-250d-4662-9b50-37f507141b22"),
                            ComponentCode = 17,
                            ComponentName = "Tutorial/Lab",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1345),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1345)
                        },
                        new
                        {
                            Id = new Guid("8ebd77f7-bced-4e44-8c5f-e3c12c2dee2c"),
                            ComponentCode = 18,
                            ComponentName = "Workshop",
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1347),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(1347)
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseReferencedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseReferencingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseReferencedId");

                    b.HasIndex("CourseReferencingId");

                    b.ToTable("CourseReferences");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DossierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NewCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("NewCourseId")
                        .IsUnique();

                    b.ToTable("CourseCreationRequests");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<RoleEnum>("UserRole")
                        .HasColumnType("role_enum");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6d98eac-4184-4e5a-8adc-7feda86e0e3b"),
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(679),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(681),
                            UserRole = RoleEnum.Initiator
                        },
                        new
                        {
                            Id = new Guid("3fc0f322-a086-4ebd-b077-518d88d5781c"),
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(687),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(688),
                            UserRole = RoleEnum.Admin
                        },
                        new
                        {
                            Id = new Guid("cf2a8f76-c52d-440e-9314-c00447fd733d"),
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(690),
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(690),
                            UserRole = RoleEnum.FacultyMember
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37581d9d-713f-475c-9668-23971b0e64d0"),
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(797),
                            Email = "admin@ccm.ca",
                            FirstName = "Super",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(797),
                            Password = "9767718E8A58C097D48ED8986E632368F71F71740C6DCE113AE75ED90176DA49:FE06FEFB87C75014327930CFB3373565"
                        },
                        new
                        {
                            Id = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a"),
                            CreatedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(813),
                            Email = "joe.user@ccm.ca",
                            FirstName = "Joe",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 2, 2, 37, 27, 990, DateTimeKind.Utc).AddTicks(813),
                            Password = "DAFBF72A150765D4DDDB5089E2D8516F5C68A00DD77930F2F4C013CB89DB8E77:B497E6DD99B7DD2ED2632F5A136A8788"
                        });
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.Property<Guid>("CourseComponentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseComponentsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CourseCourseComponent");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("3fc0f322-a086-4ebd-b077-518d88d5781c"),
                            UsersId = new Guid("37581d9d-713f-475c-9668-23971b0e64d0")
                        },
                        new
                        {
                            RolesId = new Guid("c6d98eac-4184-4e5a-8adc-7feda86e0e3b"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        },
                        new
                        {
                            RolesId = new Guid("cf2a8f76-c52d-440e-9314-c00447fd733d"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "CourseReferenced")
                        .WithMany("CourseReferenced")
                        .HasForeignKey("CourseReferencedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "CourseReferencing")
                        .WithMany("CourseReferencing")
                        .HasForeignKey("CourseReferencingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReferenced");

                    b.Navigation("CourseReferencing");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", "Dossier")
                        .WithMany("CourseCreationRequests")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "NewCourse")
                        .WithOne("CourseCreationRequest")
                        .HasForeignKey("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.CourseCreationRequest", "NewCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dossier");

                    b.Navigation("NewCourse");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("Dossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", null)
                        .WithMany()
                        .HasForeignKey("CourseComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Navigation("CourseCreationRequest");

                    b.Navigation("CourseReferenced");

                    b.Navigation("CourseReferencing");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Navigation("CourseCreationRequests");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
