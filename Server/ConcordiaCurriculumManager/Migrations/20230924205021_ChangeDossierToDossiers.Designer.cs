// <auto-generated />
using System;
using ConcordiaCurriculumManager.Models.Users;
using ConcordiaCurriculumManager.Repositories.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConcordiaCurriculumManager.Migrations
{
    [DbContext(typeof(CCMDbContext))]
    [Migration("20230924205021_ChangeDossierToDossiers")]
    partial class ChangeDossierToDossiers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_enum", new[] { "Initiator", "Admin", "FacultyMember" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Career")
                        .HasColumnType("integer");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("CourseState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreditValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquivalentCourses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreReqs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentCode")
                        .HasColumnType("integer");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CourseComponents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df1606a6-3b8a-44b9-aa9d-78e637647c9d"),
                            ComponentCode = 0,
                            ComponentName = "Conference",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7630),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7630)
                        },
                        new
                        {
                            Id = new Guid("b6380285-b4aa-4f72-8da2-4851380f515a"),
                            ComponentCode = 1,
                            ComponentName = "Field Studies",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7630),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7630)
                        },
                        new
                        {
                            Id = new Guid("c9094880-fdfc-4c5d-84a1-4703968eac25"),
                            ComponentCode = 2,
                            ComponentName = "Fieldwork",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7640),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7640)
                        },
                        new
                        {
                            Id = new Guid("1b8ca8ec-7c28-4141-9cfb-976add3d213b"),
                            ComponentCode = 3,
                            ComponentName = "Independent Study",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7650),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7650)
                        },
                        new
                        {
                            Id = new Guid("4e5fbc1b-281d-4b6e-90b6-ad9355ee2cdb"),
                            ComponentCode = 4,
                            ComponentName = "Laboratory",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7660),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7660)
                        },
                        new
                        {
                            Id = new Guid("0ac8015e-54ff-4325-bfa8-730ad5b9b9ed"),
                            ComponentCode = 5,
                            ComponentName = "Lecture",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7660),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7660)
                        },
                        new
                        {
                            Id = new Guid("24105b87-b50d-44a7-a9b4-b649564b8524"),
                            ComponentCode = 6,
                            ComponentName = "Modular",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7670),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7670)
                        },
                        new
                        {
                            Id = new Guid("0281d9a7-856a-4cb5-95a9-fd57a8945cb2"),
                            ComponentCode = 7,
                            ComponentName = "Online",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7680),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7680)
                        },
                        new
                        {
                            Id = new Guid("fdcde47e-b63f-489e-b2da-99154398b069"),
                            ComponentCode = 8,
                            ComponentName = "Practicum/Internship/Work-Term",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7690),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7690)
                        },
                        new
                        {
                            Id = new Guid("9cdf4c72-d146-4c5f-9393-e8dbe45faf13"),
                            ComponentCode = 9,
                            ComponentName = "Private Studies",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7740),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7740)
                        },
                        new
                        {
                            Id = new Guid("606e42c9-7683-4d0d-993b-e99692f7e318"),
                            ComponentCode = 10,
                            ComponentName = "Reading",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7750),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7750)
                        },
                        new
                        {
                            Id = new Guid("2d6f6f05-584a-480a-b3ab-03b8c25e57aa"),
                            ComponentCode = 11,
                            ComponentName = "Regular",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7750),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7750)
                        },
                        new
                        {
                            Id = new Guid("b8d6ec66-07ec-46d3-93bf-7954048bd43c"),
                            ComponentCode = 12,
                            ComponentName = "Research",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7760),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7760)
                        },
                        new
                        {
                            Id = new Guid("ac7a7a14-a0f9-44bb-8196-9e1c3cb74f90"),
                            ComponentCode = 13,
                            ComponentName = "Seminar",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7770),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7770)
                        },
                        new
                        {
                            Id = new Guid("afbe189c-1066-4d2c-b832-5c48023fcbc5"),
                            ComponentCode = 14,
                            ComponentName = "Studio",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7780),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7780)
                        },
                        new
                        {
                            Id = new Guid("9232e88e-6b4d-47e9-8a2d-02778090d974"),
                            ComponentCode = 15,
                            ComponentName = "Thesis Research",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7780),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7780)
                        },
                        new
                        {
                            Id = new Guid("b7d29dae-b7ae-42f6-a24d-63dc133ce692"),
                            ComponentCode = 16,
                            ComponentName = "Tutorial",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7790),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7790)
                        },
                        new
                        {
                            Id = new Guid("faaa880f-6bfe-4f9d-9128-78799ffad237"),
                            ComponentCode = 17,
                            ComponentName = "Tutorial/Lab",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7800),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7800)
                        },
                        new
                        {
                            Id = new Guid("377c7121-9e41-4811-b89e-e3c06a1adfbd"),
                            ComponentCode = 18,
                            ComponentName = "Workshop",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7800),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7810)
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NewCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("NewCourseId")
                        .IsUnique();

                    b.ToTable("CourseCreationDossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<RoleEnum>("UserRole")
                        .HasColumnType("role_enum");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66c43e77-69be-43ef-af72-7d6475621604"),
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7290),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7290),
                            UserRole = RoleEnum.Initiator
                        },
                        new
                        {
                            Id = new Guid("fa9b2620-6366-4f47-b7a4-1d502f9cf9df"),
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7300),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7300),
                            UserRole = RoleEnum.Admin
                        },
                        new
                        {
                            Id = new Guid("bcd0948b-6c9f-40b9-994e-a69f0e5bddac"),
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7310),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7310),
                            UserRole = RoleEnum.FacultyMember
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37581d9d-713f-475c-9668-23971b0e64d0"),
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7380),
                            Email = "admin@ccm.ca",
                            FirstName = "Super",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7380),
                            Password = "9767718E8A58C097D48ED8986E632368F71F71740C6DCE113AE75ED90176DA49:FE06FEFB87C75014327930CFB3373565"
                        },
                        new
                        {
                            Id = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a"),
                            CreatedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7390),
                            Email = "joe.user@ccm.ca",
                            FirstName = "Joe",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 50, 20, 934, DateTimeKind.Utc).AddTicks(7390),
                            Password = "DAFBF72A150765D4DDDB5089E2D8516F5C68A00DD77930F2F4C013CB89DB8E77:B497E6DD99B7DD2ED2632F5A136A8788"
                        });
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.Property<Guid>("CourseComponentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseComponentsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CourseCourseComponent");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("fa9b2620-6366-4f47-b7a4-1d502f9cf9df"),
                            UsersId = new Guid("37581d9d-713f-475c-9668-23971b0e64d0")
                        },
                        new
                        {
                            RolesId = new Guid("66c43e77-69be-43ef-af72-7d6475621604"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        },
                        new
                        {
                            RolesId = new Guid("bcd0948b-6c9f-40b9-994e-a69f0e5bddac"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("CourseCreationDossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "NewCourse")
                        .WithOne("CourseCreationDossier")
                        .HasForeignKey("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", "NewCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");

                    b.Navigation("NewCourse");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("Dossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", null)
                        .WithMany()
                        .HasForeignKey("CourseComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Navigation("CourseCreationDossier");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Navigation("CourseCreationDossiers");

                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
