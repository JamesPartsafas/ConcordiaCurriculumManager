// <auto-generated />
using System;
using ConcordiaCurriculumManager.Models.Users;
using ConcordiaCurriculumManager.Repositories.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConcordiaCurriculumManager.Migrations
{
    [DbContext(typeof(CCMDbContext))]
    [Migration("20231001184407_UpdateDossiers")]
    partial class UpdateDossiers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_enum", new[] { "Initiator", "Admin", "FacultyMember" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Career")
                        .HasColumnType("integer");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("CourseState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreditValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquivalentCourses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreReqs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentCode")
                        .HasColumnType("integer");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CourseComponents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e12709f5-e0a7-4797-a30c-ef3f307ffa5b"),
                            ComponentCode = 0,
                            ComponentName = "Conference",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6540),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6540)
                        },
                        new
                        {
                            Id = new Guid("7043f6bc-d5d2-404e-ae3b-589d13671891"),
                            ComponentCode = 1,
                            ComponentName = "Field Studies",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6560),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6560)
                        },
                        new
                        {
                            Id = new Guid("b837b339-3fce-49c7-9484-0df7fa66bf6b"),
                            ComponentCode = 2,
                            ComponentName = "Fieldwork",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6570),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6570)
                        },
                        new
                        {
                            Id = new Guid("e4b93e49-1778-43b7-89de-74d52f5cea2b"),
                            ComponentCode = 3,
                            ComponentName = "Independent Study",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6580),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6580)
                        },
                        new
                        {
                            Id = new Guid("c3b748ac-6279-4c30-928e-f1a2cd387945"),
                            ComponentCode = 4,
                            ComponentName = "Laboratory",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6590),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6590)
                        },
                        new
                        {
                            Id = new Guid("fc414fca-107a-44c9-a9d1-537b797e6c83"),
                            ComponentCode = 5,
                            ComponentName = "Lecture",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6610),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6610)
                        },
                        new
                        {
                            Id = new Guid("720a4ccb-a0a4-4bb7-9002-0eda589f2b5d"),
                            ComponentCode = 6,
                            ComponentName = "Modular",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6620),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6620)
                        },
                        new
                        {
                            Id = new Guid("5887e5a7-02cb-4158-bb7a-f96cebbdac7a"),
                            ComponentCode = 7,
                            ComponentName = "Online",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6630),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6630)
                        },
                        new
                        {
                            Id = new Guid("13e452ed-c215-4f58-828d-a8d78d492575"),
                            ComponentCode = 8,
                            ComponentName = "Practicum/Internship/Work-Term",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6640),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6640)
                        },
                        new
                        {
                            Id = new Guid("e210eb56-d9ef-4f3a-9cf2-637a2236397d"),
                            ComponentCode = 9,
                            ComponentName = "Private Studies",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6650),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6650)
                        },
                        new
                        {
                            Id = new Guid("1cff55e5-23d5-4d78-9192-778b8b54f659"),
                            ComponentCode = 10,
                            ComponentName = "Reading",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6670),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6670)
                        },
                        new
                        {
                            Id = new Guid("baa7a2cb-a986-40b9-a134-529ea18723fc"),
                            ComponentCode = 11,
                            ComponentName = "Regular",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6680),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6680)
                        },
                        new
                        {
                            Id = new Guid("1e3376f9-6749-4a84-88fa-83316fcf43a3"),
                            ComponentCode = 12,
                            ComponentName = "Research",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6690),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6690)
                        },
                        new
                        {
                            Id = new Guid("e9add686-c23e-4416-bf21-a9724a2a99d8"),
                            ComponentCode = 13,
                            ComponentName = "Seminar",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6710),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6710)
                        },
                        new
                        {
                            Id = new Guid("831b6bef-acfe-4bca-b57d-2ea052ee9dbd"),
                            ComponentCode = 14,
                            ComponentName = "Studio",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6720),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6720)
                        },
                        new
                        {
                            Id = new Guid("2e82a833-ff46-48d4-9d7c-def35c92ad65"),
                            ComponentCode = 15,
                            ComponentName = "Thesis Research",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6730),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6730)
                        },
                        new
                        {
                            Id = new Guid("2505db77-c801-4590-b6a2-1180f1b434cb"),
                            ComponentCode = 16,
                            ComponentName = "Tutorial",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6740),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6740)
                        },
                        new
                        {
                            Id = new Guid("6b340274-6126-46b6-bdaa-2834ae655d06"),
                            ComponentCode = 17,
                            ComponentName = "Tutorial/Lab",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6750),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6750)
                        },
                        new
                        {
                            Id = new Guid("1ea9921e-6cd5-4aea-89a8-064f011db5b8"),
                            ComponentCode = 18,
                            ComponentName = "Workshop",
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6770),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6770)
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseID"));

                    b.Property<Guid>("CourseReferencingId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseID");

                    b.HasIndex("CourseReferencingId");

                    b.ToTable("CourseReferences");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NewCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("NewCourseId")
                        .IsUnique();

                    b.ToTable("CourseCreationDossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<RoleEnum>("UserRole")
                        .HasColumnType("role_enum");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb8f66cc-a50a-44b2-aa28-e227eefa9383"),
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(5930),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(5930),
                            UserRole = RoleEnum.Initiator
                        },
                        new
                        {
                            Id = new Guid("3d879b5a-f6a7-4913-9919-9b1e95526492"),
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(5950),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(5950),
                            UserRole = RoleEnum.Admin
                        },
                        new
                        {
                            Id = new Guid("e47345a4-ac5c-4d4b-b686-051868658899"),
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(5960),
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(5960),
                            UserRole = RoleEnum.FacultyMember
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37581d9d-713f-475c-9668-23971b0e64d0"),
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6120),
                            Email = "admin@ccm.ca",
                            FirstName = "Super",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6120),
                            Password = "9767718E8A58C097D48ED8986E632368F71F71740C6DCE113AE75ED90176DA49:FE06FEFB87C75014327930CFB3373565"
                        },
                        new
                        {
                            Id = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a"),
                            CreatedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6140),
                            Email = "joe.user@ccm.ca",
                            FirstName = "Joe",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 1, 18, 44, 6, 994, DateTimeKind.Utc).AddTicks(6140),
                            Password = "DAFBF72A150765D4DDDB5089E2D8516F5C68A00DD77930F2F4C013CB89DB8E77:B497E6DD99B7DD2ED2632F5A136A8788"
                        });
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.Property<Guid>("CourseComponentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseComponentsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CourseCourseComponent");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("3d879b5a-f6a7-4913-9919-9b1e95526492"),
                            UsersId = new Guid("37581d9d-713f-475c-9668-23971b0e64d0")
                        },
                        new
                        {
                            RolesId = new Guid("eb8f66cc-a50a-44b2-aa28-e227eefa9383"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        },
                        new
                        {
                            RolesId = new Guid("e47345a4-ac5c-4d4b-b686-051868658899"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", "CourseReference")
                        .WithMany("CourseReferenced")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReference");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "CourseReferencing")
                        .WithMany()
                        .HasForeignKey("CourseReferencingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReferencing");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("CourseCreationDossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "NewCourse")
                        .WithOne("CourseCreationDossier")
                        .HasForeignKey("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", "NewCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");

                    b.Navigation("NewCourse");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("Dossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", null)
                        .WithMany()
                        .HasForeignKey("CourseComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Navigation("CourseCreationDossier");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.Navigation("CourseReferenced");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Navigation("CourseCreationDossiers");

                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
