// <auto-generated />
using System;
using ConcordiaCurriculumManager.Models.Users;
using ConcordiaCurriculumManager.Repositories.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConcordiaCurriculumManager.Migrations
{
    [DbContext(typeof(CCMDbContext))]
    [Migration("20231001192730_UpdateDossiersAgain")]
    partial class UpdateDossiersAgain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_enum", new[] { "Initiator", "Admin", "FacultyMember" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Career")
                        .HasColumnType("integer");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("CourseState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreditValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquivalentCourses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreReqs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentCode")
                        .HasColumnType("integer");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CourseComponents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c24287d-c2f5-4122-ae91-0a4a54252148"),
                            ComponentCode = 0,
                            ComponentName = "Conference",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9700),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9700)
                        },
                        new
                        {
                            Id = new Guid("5e5c944f-3cd8-4c4c-84d1-775b91000d8c"),
                            ComponentCode = 1,
                            ComponentName = "Field Studies",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9720),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9720)
                        },
                        new
                        {
                            Id = new Guid("55d8715c-9369-4189-b4a9-22abb7aa5d47"),
                            ComponentCode = 2,
                            ComponentName = "Fieldwork",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9730),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9730)
                        },
                        new
                        {
                            Id = new Guid("a0c47a83-6d75-4606-a424-5d61f8a1c7c9"),
                            ComponentCode = 3,
                            ComponentName = "Independent Study",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9740),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9740)
                        },
                        new
                        {
                            Id = new Guid("87af9a12-32a6-41fb-ad33-5caab72418d1"),
                            ComponentCode = 4,
                            ComponentName = "Laboratory",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9750),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9750)
                        },
                        new
                        {
                            Id = new Guid("69de14bc-161c-4053-b837-2b35ad50754f"),
                            ComponentCode = 5,
                            ComponentName = "Lecture",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9770),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9770)
                        },
                        new
                        {
                            Id = new Guid("548132ac-b0d1-4e36-b012-d16b3991a1c1"),
                            ComponentCode = 6,
                            ComponentName = "Modular",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9780),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9780)
                        },
                        new
                        {
                            Id = new Guid("7ce74307-0dd5-4c4b-b26d-73e0d0b2c657"),
                            ComponentCode = 7,
                            ComponentName = "Online",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9790),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9790)
                        },
                        new
                        {
                            Id = new Guid("98e83551-c78f-4d37-a1e8-1e4b2c4a441b"),
                            ComponentCode = 8,
                            ComponentName = "Practicum/Internship/Work-Term",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9800),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9800)
                        },
                        new
                        {
                            Id = new Guid("0e1a407c-0c23-4c3d-a588-9dde4aac6520"),
                            ComponentCode = 9,
                            ComponentName = "Private Studies",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9820),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9820)
                        },
                        new
                        {
                            Id = new Guid("b4358a82-c6fa-4bf3-97a3-ba5f2ca206eb"),
                            ComponentCode = 10,
                            ComponentName = "Reading",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9830),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9830)
                        },
                        new
                        {
                            Id = new Guid("7329d7f9-b6f6-4215-a1eb-fb63ad30b005"),
                            ComponentCode = 11,
                            ComponentName = "Regular",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9840),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9840)
                        },
                        new
                        {
                            Id = new Guid("58afcf7e-2f0f-4255-b45b-052c6832b495"),
                            ComponentCode = 12,
                            ComponentName = "Research",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9850),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9850)
                        },
                        new
                        {
                            Id = new Guid("dbec6d2c-d502-4de1-a972-4b5ac1eaca6c"),
                            ComponentCode = 13,
                            ComponentName = "Seminar",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9860),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9860)
                        },
                        new
                        {
                            Id = new Guid("90bc079a-377b-4b64-abf4-ecb246829162"),
                            ComponentCode = 14,
                            ComponentName = "Studio",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9880),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9880)
                        },
                        new
                        {
                            Id = new Guid("cc43b121-4574-45c1-9238-eba839b671da"),
                            ComponentCode = 15,
                            ComponentName = "Thesis Research",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9890),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9890)
                        },
                        new
                        {
                            Id = new Guid("c49f5303-a83b-45cc-8b7e-1e528a061991"),
                            ComponentCode = 16,
                            ComponentName = "Tutorial",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9900),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9900)
                        },
                        new
                        {
                            Id = new Guid("91eef5dd-bbe5-42a9-85aa-81331f75e600"),
                            ComponentCode = 17,
                            ComponentName = "Tutorial/Lab",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9910),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9910)
                        },
                        new
                        {
                            Id = new Guid("05645422-fb0a-44f8-8ff4-9f61af1da4e3"),
                            ComponentCode = 18,
                            ComponentName = "Workshop",
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9930),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9930)
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseID"));

                    b.Property<Guid>("CourseReferencingId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseID");

                    b.HasIndex("CourseReferencingId");

                    b.ToTable("CourseReferences");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NewCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("NewCourseId")
                        .IsUnique();

                    b.ToTable("CourseCreationDossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<RoleEnum>("UserRole")
                        .HasColumnType("role_enum");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3192d217-1b96-4da0-9a91-3baa339ff136"),
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9160),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9160),
                            UserRole = RoleEnum.Initiator
                        },
                        new
                        {
                            Id = new Guid("8a9d292e-94f7-4705-ab94-dd835b8a4c71"),
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9180),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9180),
                            UserRole = RoleEnum.Admin
                        },
                        new
                        {
                            Id = new Guid("43c4b59e-e408-4766-8f9a-8d17ee8784e5"),
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9190),
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9190),
                            UserRole = RoleEnum.FacultyMember
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37581d9d-713f-475c-9668-23971b0e64d0"),
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9300),
                            Email = "admin@ccm.ca",
                            FirstName = "Super",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9300),
                            Password = "9767718E8A58C097D48ED8986E632368F71F71740C6DCE113AE75ED90176DA49:FE06FEFB87C75014327930CFB3373565"
                        },
                        new
                        {
                            Id = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a"),
                            CreatedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9320),
                            Email = "joe.user@ccm.ca",
                            FirstName = "Joe",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 10, 1, 19, 27, 30, 589, DateTimeKind.Utc).AddTicks(9320),
                            Password = "DAFBF72A150765D4DDDB5089E2D8516F5C68A00DD77930F2F4C013CB89DB8E77:B497E6DD99B7DD2ED2632F5A136A8788"
                        });
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.Property<Guid>("CourseComponentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseComponentsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CourseCourseComponent");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("8a9d292e-94f7-4705-ab94-dd835b8a4c71"),
                            UsersId = new Guid("37581d9d-713f-475c-9668-23971b0e64d0")
                        },
                        new
                        {
                            RolesId = new Guid("3192d217-1b96-4da0-9a91-3baa339ff136"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        },
                        new
                        {
                            RolesId = new Guid("43c4b59e-e408-4766-8f9a-8d17ee8784e5"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", "CourseReference")
                        .WithMany("CourseReferenced")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReference");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "CourseReferencing")
                        .WithMany()
                        .HasForeignKey("CourseReferencingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReferencing");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("CourseCreationDossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "NewCourse")
                        .WithOne("CourseCreationDossier")
                        .HasForeignKey("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", "NewCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");

                    b.Navigation("NewCourse");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("Dossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", null)
                        .WithMany()
                        .HasForeignKey("CourseComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Navigation("CourseCreationDossier");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseReference", b =>
                {
                    b.Navigation("CourseReferenced");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Navigation("CourseCreationDossiers");

                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
