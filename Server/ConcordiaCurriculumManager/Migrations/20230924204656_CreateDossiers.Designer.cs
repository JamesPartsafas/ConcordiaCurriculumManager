// <auto-generated />
using System;
using ConcordiaCurriculumManager.Models.Users;
using ConcordiaCurriculumManager.Repositories.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConcordiaCurriculumManager.Migrations
{
    [DbContext(typeof(CCMDbContext))]
    [Migration("20230924204656_CreateDossiers")]
    partial class CreateDossiers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_enum", new[] { "Initiator", "Admin", "FacultyMember" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Career")
                        .HasColumnType("integer");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("CourseState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreditValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquivalentCourses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreReqs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentCode")
                        .HasColumnType("integer");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CourseComponents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9124cc18-db0c-4a87-b17a-f1055c40b9ec"),
                            ComponentCode = 0,
                            ComponentName = "Conference",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1610),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1610)
                        },
                        new
                        {
                            Id = new Guid("6922e123-59ab-4e2c-aa2c-eb31bf98896c"),
                            ComponentCode = 1,
                            ComponentName = "Field Studies",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1620),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1620)
                        },
                        new
                        {
                            Id = new Guid("ac63cb18-bdb6-47c3-928a-9f517b32042f"),
                            ComponentCode = 2,
                            ComponentName = "Fieldwork",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1630),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1630)
                        },
                        new
                        {
                            Id = new Guid("86c3bd81-31e4-4796-83b0-baa5c8445bcd"),
                            ComponentCode = 3,
                            ComponentName = "Independent Study",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1640),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1640)
                        },
                        new
                        {
                            Id = new Guid("739e01dd-7c25-487a-bf15-3d12a9190d38"),
                            ComponentCode = 4,
                            ComponentName = "Laboratory",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1640),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1640)
                        },
                        new
                        {
                            Id = new Guid("5067fbc1-b08c-44b2-b0b8-8e3348364466"),
                            ComponentCode = 5,
                            ComponentName = "Lecture",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1650),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1650)
                        },
                        new
                        {
                            Id = new Guid("d2c853b0-e8ad-4544-b9ee-0e7fd2b26e51"),
                            ComponentCode = 6,
                            ComponentName = "Modular",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1660),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1660)
                        },
                        new
                        {
                            Id = new Guid("57ed0216-ebb5-4951-8387-1ad4f1df1887"),
                            ComponentCode = 7,
                            ComponentName = "Online",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1670),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1670)
                        },
                        new
                        {
                            Id = new Guid("6dc73ec7-4149-44c6-8633-5b01fa08b713"),
                            ComponentCode = 8,
                            ComponentName = "Practicum/Internship/Work-Term",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1680),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1680)
                        },
                        new
                        {
                            Id = new Guid("d103f7a7-f2c0-4168-980b-8cdb8e8ca4ec"),
                            ComponentCode = 9,
                            ComponentName = "Private Studies",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1680),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1680)
                        },
                        new
                        {
                            Id = new Guid("a2b9f1b4-de6a-4771-aa52-f4c16b2416f1"),
                            ComponentCode = 10,
                            ComponentName = "Reading",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1690),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1690)
                        },
                        new
                        {
                            Id = new Guid("631932be-93cb-4434-af6d-646258632671"),
                            ComponentCode = 11,
                            ComponentName = "Regular",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1700),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1700)
                        },
                        new
                        {
                            Id = new Guid("9e0d1ea6-7e23-40c4-92a2-607aef3f3d5b"),
                            ComponentCode = 12,
                            ComponentName = "Research",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1710),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1710)
                        },
                        new
                        {
                            Id = new Guid("79058e71-abb4-4f8a-8ae1-eadf0b286e5b"),
                            ComponentCode = 13,
                            ComponentName = "Seminar",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1710),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1710)
                        },
                        new
                        {
                            Id = new Guid("1b272084-8e74-4ce7-ba3b-a33bade66481"),
                            ComponentCode = 14,
                            ComponentName = "Studio",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1720),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1720)
                        },
                        new
                        {
                            Id = new Guid("fb8f36a6-f8b1-4aea-aedb-10757b9f6cf4"),
                            ComponentCode = 15,
                            ComponentName = "Thesis Research",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1730),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1730)
                        },
                        new
                        {
                            Id = new Guid("edcb4f9f-2e6e-4430-87fd-539c33779da9"),
                            ComponentCode = 16,
                            ComponentName = "Tutorial",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1740),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1740)
                        },
                        new
                        {
                            Id = new Guid("27fadeb9-fcc9-4cbc-9371-8fcc1e24fa9f"),
                            ComponentCode = 17,
                            ComponentName = "Tutorial/Lab",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1740),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1740)
                        },
                        new
                        {
                            Id = new Guid("896aeb25-d471-41bc-9c2a-2b8939b74321"),
                            ComponentCode = 18,
                            ComponentName = "Workshop",
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1750),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1750)
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NewCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("NewCourseId")
                        .IsUnique();

                    b.ToTable("CourseCreationDossiers");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Dossier");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<RoleEnum>("UserRole")
                        .HasColumnType("role_enum");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9639f0f2-bc1d-4f84-a6c8-d2868ed3ae38"),
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1250),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1260),
                            UserRole = RoleEnum.Initiator
                        },
                        new
                        {
                            Id = new Guid("394dc872-fa07-4e2f-a8cb-65e12d552f5a"),
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1270),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1270),
                            UserRole = RoleEnum.Admin
                        },
                        new
                        {
                            Id = new Guid("3150867c-4666-4347-be48-515d6e3bbc59"),
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1270),
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1270),
                            UserRole = RoleEnum.FacultyMember
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37581d9d-713f-475c-9668-23971b0e64d0"),
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1360),
                            Email = "admin@ccm.ca",
                            FirstName = "Super",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1360),
                            Password = "9767718E8A58C097D48ED8986E632368F71F71740C6DCE113AE75ED90176DA49:FE06FEFB87C75014327930CFB3373565"
                        },
                        new
                        {
                            Id = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a"),
                            CreatedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1370),
                            Email = "joe.user@ccm.ca",
                            FirstName = "Joe",
                            LastName = "User",
                            ModifiedDate = new DateTime(2023, 9, 24, 20, 46, 56, 383, DateTimeKind.Utc).AddTicks(1370),
                            Password = "DAFBF72A150765D4DDDB5089E2D8516F5C68A00DD77930F2F4C013CB89DB8E77:B497E6DD99B7DD2ED2632F5A136A8788"
                        });
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.Property<Guid>("CourseComponentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseComponentsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CourseCourseComponent");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("394dc872-fa07-4e2f-a8cb-65e12d552f5a"),
                            UsersId = new Guid("37581d9d-713f-475c-9668-23971b0e64d0")
                        },
                        new
                        {
                            RolesId = new Guid("9639f0f2-bc1d-4f84-a6c8-d2868ed3ae38"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        },
                        new
                        {
                            RolesId = new Guid("3150867c-4666-4347-be48-515d6e3bbc59"),
                            UsersId = new Guid("8c55b0c3-b4cf-4948-a730-dad3fa37c69a")
                        });
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("CourseCreationDossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", "NewCourse")
                        .WithOne("CourseCreationDossier")
                        .HasForeignKey("ConcordiaCurriculumManager.Models.Curriculum.Dossier.CourseCreationDossier", "NewCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");

                    b.Navigation("NewCourse");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Dossiers.Dossier", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", "Initiator")
                        .WithMany("Dossiers")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("CourseCourseComponent", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.CourseComponent", null)
                        .WithMany()
                        .HasForeignKey("CourseComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Curriculum.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ConcordiaCurriculumManager.Models.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcordiaCurriculumManager.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Curriculum.Course", b =>
                {
                    b.Navigation("CourseCreationDossier");
                });

            modelBuilder.Entity("ConcordiaCurriculumManager.Models.Users.User", b =>
                {
                    b.Navigation("CourseCreationDossiers");

                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
